{
  "stats": {
    "suites": 3,
    "tests": 11,
    "passes": 10,
    "pending": 0,
    "failures": 1,
    "start": "2025-10-07T20:11:50.921Z",
    "end": "2025-10-07T20:11:54.885Z",
    "duration": 3964,
    "testsRegistered": 11,
    "passPercent": 90.9090909090909,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "995153d2-61c3-41eb-8489-9b35a5e06c7e",
      "title": "",
      "fullFile": "cypress\\e2e\\api\\postCalls.cy.js",
      "file": "cypress\\e2e\\api\\postCalls.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a77c6b74-fd52-4ccb-8e0a-9bc49748be45",
          "title": "Test for Login POST calls",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "eff65d1d-4303-49a0-8c7b-80583efc631e",
              "title": "Tests scenarios for the /login call",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Validate Login using correct credentials",
                  "fullTitle": "Test for Login POST calls Tests scenarios for the /login call Validate Login using correct credentials",
                  "timedOut": null,
                  "duration": 1047,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.requestsFor({\n  method: 'POST',\n  url: '/login',\n  body: {\n    \"email\": \"test@test.com\",\n    \"password\": \"teste\"\n  }\n}).then(response => {\n  expect(response.status).to.be.oneOf([200, 201]);\n  expect(response.body).to.have.property('message');\n  expect(response.body).to.have.property('authorization');\n});",
                  "err": {},
                  "uuid": "6f05ee40-9fa3-492c-bf04-72b5f3ba4c1f",
                  "parentUUID": "eff65d1d-4303-49a0-8c7b-80583efc631e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Validate Login using incorrect credentials",
                  "fullTitle": "Test for Login POST calls Tests scenarios for the /login call Validate Login using incorrect credentials",
                  "timedOut": null,
                  "duration": 238,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.requestsFor({\n  method: 'POST',\n  url: '/login',\n  body: {\n    \"email\": \"test@t.com\",\n    \"password\": \"testeeee123\"\n  }\n}).then(response => {\n  expect(response.status).to.be.oneOf([400, 401]);\n  expect(response.body).to.have.property('message');\n});",
                  "err": {},
                  "uuid": "6c74a1ea-28bb-4a10-b3f6-70dfc6b503a8",
                  "parentUUID": "eff65d1d-4303-49a0-8c7b-80583efc631e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Validate Login without Password",
                  "fullTitle": "Test for Login POST calls Tests scenarios for the /login call Validate Login without Password",
                  "timedOut": null,
                  "duration": 230,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.requestsFor({\n  method: 'POST',\n  url: '/login',\n  body: {\n    \"email\": \"test@t.com\"\n  }\n}).then(response => {\n  expect(response.status).to.be.oneOf([400, 401]);\n  expect(response.body).to.have.property('password');\n});",
                  "err": {},
                  "uuid": "15635ce6-93e0-40ff-be23-2fb44aa1239e",
                  "parentUUID": "eff65d1d-4303-49a0-8c7b-80583efc631e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Validate Login without Email",
                  "fullTitle": "Test for Login POST calls Tests scenarios for the /login call Validate Login without Email",
                  "timedOut": null,
                  "duration": 241,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.requestsFor({\n  method: 'POST',\n  url: '/login',\n  body: {\n    \"password\": \"teste\"\n  }\n}).then(response => {\n  expect(response.status).to.be.oneOf([400, 401]);\n  expect(response.body).to.have.property('email');\n});",
                  "err": {},
                  "uuid": "8f3da070-3062-493d-adc1-71231734ec11",
                  "parentUUID": "eff65d1d-4303-49a0-8c7b-80583efc631e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Validate Login with empty body",
                  "fullTitle": "Test for Login POST calls Tests scenarios for the /login call Validate Login with empty body",
                  "timedOut": null,
                  "duration": 251,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.requestsFor({\n  method: 'POST',\n  url: '/login',\n  body: {}\n}).then(response => {\n  expect(response.status).to.be.oneOf([400, 401]);\n  expect(response.body).to.have.property('email');\n  expect(response.body).to.have.property('password');\n});",
                  "err": {},
                  "uuid": "13a12f7e-a672-4480-8903-1371ae69d0fa",
                  "parentUUID": "eff65d1d-4303-49a0-8c7b-80583efc631e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6f05ee40-9fa3-492c-bf04-72b5f3ba4c1f",
                "6c74a1ea-28bb-4a10-b3f6-70dfc6b503a8",
                "15635ce6-93e0-40ff-be23-2fb44aa1239e",
                "8f3da070-3062-493d-adc1-71231734ec11",
                "13a12f7e-a672-4480-8903-1371ae69d0fa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2007,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e1b49739-915b-47c0-8a8b-470e530b237a",
              "title": "Tests scenarios for the /usuarios call",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Given we create a user with the correct data then we should succeed",
                  "fullTitle": "Test for Login POST calls Tests scenarios for the /usuarios call Given we create a user with the correct data then we should succeed",
                  "timedOut": null,
                  "duration": 608,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.requestsFor({\n  method: 'POST',\n  url: '/usuarios',\n  body: {\n    nome: \"Test\",\n    email: \"test12345@test.com\",\n    password: \"teste\",\n    administrador: \"false\"\n  }\n}).then(response => {\n  expect(response.status).to.be.oneOf([200, 201]);\n  expect(response.body).to.have.property('message');\n  expect(response.body).to.have.property('_id');\n  const _id = response.body._id;\n  cy.wrap(_id).as('UserId');\n});",
                  "err": {
                    "message": "AssertionError: expected 400 to be one of [ 200, 201 ]",
                    "estack": "AssertionError: expected 400 to be one of [ 200, 201 ]\n    at Context.eval (webpack://bluesix/./cypress/e2e/api/postCalls.cy.js:86:46)",
                    "diff": "- 400\n+ [ 200, 201 ]\n"
                  },
                  "uuid": "5b2d686f-da19-4e6b-b0eb-a53c4752af23",
                  "parentUUID": "e1b49739-915b-47c0-8a8b-470e530b237a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Given we try to create a user without Name then we should not succeed",
                  "fullTitle": "Test for Login POST calls Tests scenarios for the /usuarios call Given we try to create a user without Name then we should not succeed",
                  "timedOut": null,
                  "duration": 245,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.requestsFor({\n  method: 'POST',\n  url: '/usuarios',\n  body: {\n    email: \"test@test.com\",\n    password: \"teste\",\n    administrador: \"false\"\n  }\n}).then(response => {\n  expect(response.status).to.be.oneOf([400, 401]);\n  expect(response.body).to.have.property('nome');\n});",
                  "err": {},
                  "uuid": "da6cc15a-e334-40e6-bd0d-5cf98fceec24",
                  "parentUUID": "e1b49739-915b-47c0-8a8b-470e530b237a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Given we try to create a user without Administrador then we should not succeed",
                  "fullTitle": "Test for Login POST calls Tests scenarios for the /usuarios call Given we try to create a user without Administrador then we should not succeed",
                  "timedOut": null,
                  "duration": 249,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.requestsFor({\n  method: 'POST',\n  url: '/usuarios',\n  body: {\n    nome: \"Test\",\n    email: \"test@test.com\",\n    password: \"teste\"\n  }\n}).then(response => {\n  expect(response.status).to.be.oneOf([400, 401]);\n  expect(response.body).to.have.property('administrador');\n});",
                  "err": {},
                  "uuid": "419d4e24-38fe-4c38-9ac6-38f4bf62bcf8",
                  "parentUUID": "e1b49739-915b-47c0-8a8b-470e530b237a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Given we try to create a user without Password then we should not succeed",
                  "fullTitle": "Test for Login POST calls Tests scenarios for the /usuarios call Given we try to create a user without Password then we should not succeed",
                  "timedOut": null,
                  "duration": 247,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.requestsFor({\n  method: 'POST',\n  url: '/usuarios',\n  body: {\n    nome: \"Test\",\n    email: \"test@test.com\",\n    administrador: \"false\"\n  }\n}).then(response => {\n  expect(response.status).to.be.oneOf([400, 401]);\n  expect(response.body).to.have.property('password');\n});",
                  "err": {},
                  "uuid": "3a14245d-a858-4ec2-9bc6-2b7da79a9df1",
                  "parentUUID": "e1b49739-915b-47c0-8a8b-470e530b237a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Given we try to create a user without Email then we should not succeed",
                  "fullTitle": "Test for Login POST calls Tests scenarios for the /usuarios call Given we try to create a user without Email then we should not succeed",
                  "timedOut": null,
                  "duration": 240,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.requestsFor({\n  method: 'POST',\n  url: '/usuarios',\n  body: {\n    nome: \"Test\",\n    password: \"teste\",\n    administrador: \"false\"\n  }\n}).then(response => {\n  expect(response.status).to.be.oneOf([400, 401]);\n  expect(response.body).to.have.property('email');\n});",
                  "err": {},
                  "uuid": "f790a820-480b-4b49-a8cf-9f5f0041ed2e",
                  "parentUUID": "e1b49739-915b-47c0-8a8b-470e530b237a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Given we try to create a user with Empty body then we should not succeed",
                  "fullTitle": "Test for Login POST calls Tests scenarios for the /usuarios call Given we try to create a user with Empty body then we should not succeed",
                  "timedOut": null,
                  "duration": 243,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.requestsFor({\n  method: 'POST',\n  url: '/usuarios',\n  body: {}\n}).then(response => {\n  expect(response.status).to.be.oneOf([400, 401]);\n  expect(response.body).to.have.property('email');\n  expect(response.body).to.have.property('password');\n  expect(response.body).to.have.property('nome');\n  expect(response.body).to.have.property('administrador');\n});",
                  "err": {},
                  "uuid": "795182d5-3bd6-4656-ae3f-03a2dfe912da",
                  "parentUUID": "e1b49739-915b-47c0-8a8b-470e530b237a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "da6cc15a-e334-40e6-bd0d-5cf98fceec24",
                "419d4e24-38fe-4c38-9ac6-38f4bf62bcf8",
                "3a14245d-a858-4ec2-9bc6-2b7da79a9df1",
                "f790a820-480b-4b49-a8cf-9f5f0041ed2e",
                "795182d5-3bd6-4656-ae3f-03a2dfe912da"
              ],
              "failures": [
                "5b2d686f-da19-4e6b-b0eb-a53c4752af23"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1832,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.3.0"
    }
  }
}