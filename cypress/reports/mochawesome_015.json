{
  "stats": {
    "suites": 4,
    "tests": 9,
    "passes": 6,
    "pending": 0,
    "failures": 3,
    "start": "2025-10-16T15:30:41.503Z",
    "end": "2025-10-16T15:30:44.322Z",
    "duration": 2819,
    "testsRegistered": 9,
    "passPercent": 66.66666666666666,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c19762d8-a401-4f1d-b305-caf94e97b6fb",
      "title": "",
      "fullFile": "cypress\\e2e\\api\\usuariosCalls.cy.js",
      "file": "cypress\\e2e\\api\\usuariosCalls.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "50b34b3c-da8f-4a27-85bf-2a4d38ea22bb",
          "title": "Tests for Usuarios calls",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4e3805a1-8226-42f9-adeb-485014035e39",
              "title": "Tests scenarios for the POST call",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Given have user data When we create a user this data then we should succeed",
                  "fullTitle": "Tests for Usuarios calls Tests scenarios for the POST call Given have user data When we create a user this data then we should succeed",
                  "timedOut": null,
                  "duration": 442,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.requestsFor({\n  method: 'POST',\n  url: '/usuarios',\n  body: {\n    nome: \"Test\",\n    email: (0, _createUser.default)(),\n    password: \"teste\",\n    administrador: \"false\"\n  }\n}).then(response => {\n  expect(response.status).to.be.oneOf([200, 201]);\n  expect(response.body).to.have.property('message');\n  expect(response.body).to.have.property('_id');\n  //expect(response.duration).to.be.lessThan(??) Necessario saber qual o valor aceitavel do tempo de resposta\n  const _id = response.body._id;\n  cy.wrap(_id).as('UserId');\n});",
                  "err": {
                    "message": "TypeError: (0 , _createUser.default) is not a function",
                    "estack": "TypeError: (0 , _createUser.default) is not a function\n    at Context.eval (webpack://bluesix/./cypress/e2e/api/usuariosCalls.cy.js:10:39)",
                    "diff": null
                  },
                  "uuid": "81c0c040-53f1-47c0-b406-4f846093b136",
                  "parentUUID": "4e3805a1-8226-42f9-adeb-485014035e39",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Given we try to create a user When we miss the Name then we should not succeed on creating the user",
                  "fullTitle": "Tests for Usuarios calls Tests scenarios for the POST call Given we try to create a user When we miss the Name then we should not succeed on creating the user",
                  "timedOut": null,
                  "duration": 240,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.requestsFor({\n  method: 'POST',\n  url: '/usuarios',\n  body: {\n    email: \"test@test.com\",\n    password: \"teste\",\n    administrador: \"false\"\n  }\n}).then(response => {\n  expect(response.status).to.be.oneOf([400, 401]);\n  expect(response.body).to.have.property('nome');\n});",
                  "err": {},
                  "uuid": "d068064e-5fce-485b-bce6-71e10df3c77f",
                  "parentUUID": "4e3805a1-8226-42f9-adeb-485014035e39",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Given we try to create a user without Administrador then we should not succeed",
                  "fullTitle": "Tests for Usuarios calls Tests scenarios for the POST call Given we try to create a user without Administrador then we should not succeed",
                  "timedOut": null,
                  "duration": 232,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.requestsFor({\n  method: 'POST',\n  url: '/usuarios',\n  body: {\n    nome: \"Test\",\n    email: \"test@test.com\",\n    password: \"teste\"\n  }\n}).then(response => {\n  expect(response.status).to.be.oneOf([400, 401]);\n  expect(response.body).to.have.property('administrador');\n});",
                  "err": {},
                  "uuid": "64802b4d-b51e-4170-8e07-d888ea13d557",
                  "parentUUID": "4e3805a1-8226-42f9-adeb-485014035e39",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Given we try to create a user without Password then we should not succeed",
                  "fullTitle": "Tests for Usuarios calls Tests scenarios for the POST call Given we try to create a user without Password then we should not succeed",
                  "timedOut": null,
                  "duration": 228,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.requestsFor({\n  method: 'POST',\n  url: '/usuarios',\n  body: {\n    nome: \"Test\",\n    email: \"test@test.com\",\n    administrador: \"false\"\n  }\n}).then(response => {\n  expect(response.status).to.be.oneOf([400, 401]);\n  expect(response.body).to.have.property('password');\n});",
                  "err": {},
                  "uuid": "d49aff5b-194c-4cba-af29-d0e1a0146524",
                  "parentUUID": "4e3805a1-8226-42f9-adeb-485014035e39",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Given we try to create a user without Email then we should not succeed",
                  "fullTitle": "Tests for Usuarios calls Tests scenarios for the POST call Given we try to create a user without Email then we should not succeed",
                  "timedOut": null,
                  "duration": 247,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.requestsFor({\n  method: 'POST',\n  url: '/usuarios',\n  body: {\n    nome: \"Test\",\n    password: \"teste\",\n    administrador: \"false\"\n  }\n}).then(response => {\n  expect(response.status).to.be.oneOf([400, 401]);\n  expect(response.body).to.have.property('email');\n});",
                  "err": {},
                  "uuid": "deee94c3-caa6-48b9-bf94-55d48a1936ad",
                  "parentUUID": "4e3805a1-8226-42f9-adeb-485014035e39",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Given we try to create a user with Empty body then we should not succeed",
                  "fullTitle": "Tests for Usuarios calls Tests scenarios for the POST call Given we try to create a user with Empty body then we should not succeed",
                  "timedOut": null,
                  "duration": 242,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.requestsFor({\n  method: 'POST',\n  url: '/usuarios',\n  body: {}\n}).then(response => {\n  expect(response.status).to.be.oneOf([400, 401]);\n  expect(response.body).to.have.property('email');\n  expect(response.body).to.have.property('password');\n  expect(response.body).to.have.property('nome');\n  expect(response.body).to.have.property('administrador');\n});",
                  "err": {},
                  "uuid": "f3f8afb0-d4ad-43d1-bce4-ccfb787e84e0",
                  "parentUUID": "4e3805a1-8226-42f9-adeb-485014035e39",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d068064e-5fce-485b-bce6-71e10df3c77f",
                "64802b4d-b51e-4170-8e07-d888ea13d557",
                "d49aff5b-194c-4cba-af29-d0e1a0146524",
                "deee94c3-caa6-48b9-bf94-55d48a1936ad",
                "f3f8afb0-d4ad-43d1-bce4-ccfb787e84e0"
              ],
              "failures": [
                "81c0c040-53f1-47c0-b406-4f846093b136"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1631,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3364592a-3046-465d-be44-ac924aab8192",
              "title": "Tests scenarios for the GET call",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Given we create a user with the correct data then we should succeed",
                  "fullTitle": "Tests for Usuarios calls Tests scenarios for the GET call Given we create a user with the correct data then we should succeed",
                  "timedOut": null,
                  "duration": 517,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.requestsFor({\n  method: 'POST',\n  url: '/usuarios',\n  body: {\n    nome: \"Test\",\n    email: \"test12345@test.com\",\n    password: \"teste\",\n    administrador: \"false\"\n  }\n}).then(response => {\n  expect(response.status).to.be.oneOf([200, 201]);\n  expect(response.body).to.have.property('message');\n  expect(response.body).to.have.property('_id');\n  const _id = response.body._id;\n  cy.wrap(_id).as('UserId');\n});",
                  "err": {
                    "message": "AssertionError: expected 400 to be one of [ 200, 201 ]",
                    "estack": "AssertionError: expected 400 to be one of [ 200, 201 ]\n    at Context.eval (webpack://bluesix/./cypress/e2e/api/usuariosCalls.cy.js:114:46)",
                    "diff": "- 400\n+ [ 200, 201 ]\n"
                  },
                  "uuid": "d5e8dc6a-f38a-4f7e-bf9b-58ef5bd200a2",
                  "parentUUID": "3364592a-3046-465d-be44-ac924aab8192",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Given we try to create a user without Name then we should not succeed",
                  "fullTitle": "Tests for Usuarios calls Tests scenarios for the GET call Given we try to create a user without Name then we should not succeed",
                  "timedOut": null,
                  "duration": 223,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.requestsFor({\n  method: 'POST',\n  url: '/usuarios',\n  body: {\n    email: \"test@test.com\",\n    password: \"teste\",\n    administrador: \"false\"\n  }\n}).then(response => {\n  expect(response.status).to.be.oneOf([400, 401]);\n  expect(response.body).to.have.property('nome');\n});",
                  "err": {},
                  "uuid": "9a656783-6a9f-4afb-b315-f494142a5366",
                  "parentUUID": "3364592a-3046-465d-be44-ac924aab8192",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9a656783-6a9f-4afb-b315-f494142a5366"
              ],
              "failures": [
                "d5e8dc6a-f38a-4f7e-bf9b-58ef5bd200a2"
              ],
              "pending": [],
              "skipped": [],
              "duration": 740,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "956aab01-5d10-4479-b24b-cbd714ef5a40",
              "title": "Test scenario for the simple DELETE call",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Given we have an already created user When we delete it then we should suceed",
                  "fullTitle": "Tests for Usuarios calls Test scenario for the simple DELETE call Given we have an already created user When we delete it then we should suceed",
                  "timedOut": null,
                  "duration": 285,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.requestsFor('DELETE', `/usuarios/${_id}`);",
                  "err": {
                    "message": "ReferenceError: _id is not defined",
                    "estack": "ReferenceError: _id is not defined\n    at Context.eval (webpack://bluesix/./cypress/e2e/api/usuariosCalls.cy.js:142:50)",
                    "diff": null
                  },
                  "uuid": "fa720c5c-cb77-41d3-b7a6-2412b2dfb608",
                  "parentUUID": "956aab01-5d10-4479-b24b-cbd714ef5a40",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "fa720c5c-cb77-41d3-b7a6-2412b2dfb608"
              ],
              "pending": [],
              "skipped": [],
              "duration": 285,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.3.0"
    }
  }
}