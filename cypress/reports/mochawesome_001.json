{
  "stats": {
    "suites": 3,
    "tests": 11,
    "passes": 10,
    "pending": 0,
    "failures": 1,
    "start": "2025-10-07T20:17:03.478Z",
    "end": "2025-10-07T20:17:06.770Z",
    "duration": 3292,
    "testsRegistered": 11,
    "passPercent": 90.9090909090909,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c395e796-6c5c-4cf6-9d34-3aa6607ce474",
      "title": "",
      "fullFile": "cypress\\e2e\\api\\postCalls.cy.js",
      "file": "cypress\\e2e\\api\\postCalls.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f1e61d5b-7c03-4a0a-b0e2-eeb37ffaddd1",
          "title": "Test for Login POST calls",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "03bd17ca-614e-43a2-856f-4a87b8b5012b",
              "title": "Tests scenarios for the /login call",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Validate Login using correct credentials",
                  "fullTitle": "Test for Login POST calls Tests scenarios for the /login call Validate Login using correct credentials",
                  "timedOut": null,
                  "duration": 455,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.requestsFor({\n  method: 'POST',\n  url: '/login',\n  body: {\n    \"email\": \"test@test.com\",\n    \"password\": \"teste\"\n  }\n}).then(response => {\n  expect(response.status).to.be.oneOf([200, 201]);\n  expect(response.body).to.have.property('message');\n  expect(response.body).to.have.property('authorization');\n});",
                  "err": {},
                  "uuid": "7010bf62-60e0-4e61-b3c6-4d38066975ea",
                  "parentUUID": "03bd17ca-614e-43a2-856f-4a87b8b5012b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Validate Login using incorrect credentials",
                  "fullTitle": "Test for Login POST calls Tests scenarios for the /login call Validate Login using incorrect credentials",
                  "timedOut": null,
                  "duration": 217,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.requestsFor({\n  method: 'POST',\n  url: '/login',\n  body: {\n    \"email\": \"test@t.com\",\n    \"password\": \"testeeee123\"\n  }\n}).then(response => {\n  expect(response.status).to.be.oneOf([400, 401]);\n  expect(response.body).to.have.property('message');\n});",
                  "err": {},
                  "uuid": "21972901-23e8-4528-9ae2-7ba5d04b00c5",
                  "parentUUID": "03bd17ca-614e-43a2-856f-4a87b8b5012b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Validate Login without Password",
                  "fullTitle": "Test for Login POST calls Tests scenarios for the /login call Validate Login without Password",
                  "timedOut": null,
                  "duration": 228,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.requestsFor({\n  method: 'POST',\n  url: '/login',\n  body: {\n    \"email\": \"test@t.com\"\n  }\n}).then(response => {\n  expect(response.status).to.be.oneOf([400, 401]);\n  expect(response.body).to.have.property('password');\n});",
                  "err": {},
                  "uuid": "3c8d1756-a5c6-486c-a234-53aa490c1f65",
                  "parentUUID": "03bd17ca-614e-43a2-856f-4a87b8b5012b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Validate Login without Email",
                  "fullTitle": "Test for Login POST calls Tests scenarios for the /login call Validate Login without Email",
                  "timedOut": null,
                  "duration": 225,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.requestsFor({\n  method: 'POST',\n  url: '/login',\n  body: {\n    \"password\": \"teste\"\n  }\n}).then(response => {\n  expect(response.status).to.be.oneOf([400, 401]);\n  expect(response.body).to.have.property('email');\n});",
                  "err": {},
                  "uuid": "70faa294-9bfd-4750-9826-a43a878e734c",
                  "parentUUID": "03bd17ca-614e-43a2-856f-4a87b8b5012b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Validate Login with empty body",
                  "fullTitle": "Test for Login POST calls Tests scenarios for the /login call Validate Login with empty body",
                  "timedOut": null,
                  "duration": 215,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.requestsFor({\n  method: 'POST',\n  url: '/login',\n  body: {}\n}).then(response => {\n  expect(response.status).to.be.oneOf([400, 401]);\n  expect(response.body).to.have.property('email');\n  expect(response.body).to.have.property('password');\n});",
                  "err": {},
                  "uuid": "bdb8f703-578d-4c62-96d2-9b342327005b",
                  "parentUUID": "03bd17ca-614e-43a2-856f-4a87b8b5012b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7010bf62-60e0-4e61-b3c6-4d38066975ea",
                "21972901-23e8-4528-9ae2-7ba5d04b00c5",
                "3c8d1756-a5c6-486c-a234-53aa490c1f65",
                "70faa294-9bfd-4750-9826-a43a878e734c",
                "bdb8f703-578d-4c62-96d2-9b342327005b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1340,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "093299ba-db8f-42bc-a477-8e99852c453f",
              "title": "Tests scenarios for the /usuarios call",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Given we create a user with the correct data then we should succeed",
                  "fullTitle": "Test for Login POST calls Tests scenarios for the /usuarios call Given we create a user with the correct data then we should succeed",
                  "timedOut": null,
                  "duration": 668,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.requestsFor({\n  method: 'POST',\n  url: '/usuarios',\n  body: {\n    nome: \"Test\",\n    email: \"test12345@test.com\",\n    password: \"teste\",\n    administrador: \"false\"\n  }\n}).then(response => {\n  expect(response.status).to.be.oneOf([200, 201]);\n  expect(response.body).to.have.property('message');\n  expect(response.body).to.have.property('_id');\n  const _id = response.body._id;\n  cy.wrap(_id).as('UserId');\n});",
                  "err": {
                    "message": "AssertionError: expected 400 to be one of [ 200, 201 ]",
                    "estack": "AssertionError: expected 400 to be one of [ 200, 201 ]\n    at Context.eval (webpack://bluesix/./cypress/e2e/api/postCalls.cy.js:86:46)",
                    "diff": "- 400\n+ [ 200, 201 ]\n"
                  },
                  "uuid": "19605084-36ca-47c0-80c1-5e2471a62ae5",
                  "parentUUID": "093299ba-db8f-42bc-a477-8e99852c453f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Given we try to create a user without Name then we should not succeed",
                  "fullTitle": "Test for Login POST calls Tests scenarios for the /usuarios call Given we try to create a user without Name then we should not succeed",
                  "timedOut": null,
                  "duration": 223,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.requestsFor({\n  method: 'POST',\n  url: '/usuarios',\n  body: {\n    email: \"test@test.com\",\n    password: \"teste\",\n    administrador: \"false\"\n  }\n}).then(response => {\n  expect(response.status).to.be.oneOf([400, 401]);\n  expect(response.body).to.have.property('nome');\n});",
                  "err": {},
                  "uuid": "a9a7e39f-311c-4e00-ae0c-d1c7c21c4900",
                  "parentUUID": "093299ba-db8f-42bc-a477-8e99852c453f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Given we try to create a user without Administrador then we should not succeed",
                  "fullTitle": "Test for Login POST calls Tests scenarios for the /usuarios call Given we try to create a user without Administrador then we should not succeed",
                  "timedOut": null,
                  "duration": 230,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.requestsFor({\n  method: 'POST',\n  url: '/usuarios',\n  body: {\n    nome: \"Test\",\n    email: \"test@test.com\",\n    password: \"teste\"\n  }\n}).then(response => {\n  expect(response.status).to.be.oneOf([400, 401]);\n  expect(response.body).to.have.property('administrador');\n});",
                  "err": {},
                  "uuid": "2f0d2454-442c-41b7-a3ca-22cf12574923",
                  "parentUUID": "093299ba-db8f-42bc-a477-8e99852c453f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Given we try to create a user without Password then we should not succeed",
                  "fullTitle": "Test for Login POST calls Tests scenarios for the /usuarios call Given we try to create a user without Password then we should not succeed",
                  "timedOut": null,
                  "duration": 219,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.requestsFor({\n  method: 'POST',\n  url: '/usuarios',\n  body: {\n    nome: \"Test\",\n    email: \"test@test.com\",\n    administrador: \"false\"\n  }\n}).then(response => {\n  expect(response.status).to.be.oneOf([400, 401]);\n  expect(response.body).to.have.property('password');\n});",
                  "err": {},
                  "uuid": "41f8b1e7-9c5b-4e2b-9708-214647263f58",
                  "parentUUID": "093299ba-db8f-42bc-a477-8e99852c453f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Given we try to create a user without Email then we should not succeed",
                  "fullTitle": "Test for Login POST calls Tests scenarios for the /usuarios call Given we try to create a user without Email then we should not succeed",
                  "timedOut": null,
                  "duration": 228,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.requestsFor({\n  method: 'POST',\n  url: '/usuarios',\n  body: {\n    nome: \"Test\",\n    password: \"teste\",\n    administrador: \"false\"\n  }\n}).then(response => {\n  expect(response.status).to.be.oneOf([400, 401]);\n  expect(response.body).to.have.property('email');\n});",
                  "err": {},
                  "uuid": "db1b1086-34ed-4623-96c1-a43d18de65ce",
                  "parentUUID": "093299ba-db8f-42bc-a477-8e99852c453f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Given we try to create a user with Empty body then we should not succeed",
                  "fullTitle": "Test for Login POST calls Tests scenarios for the /usuarios call Given we try to create a user with Empty body then we should not succeed",
                  "timedOut": null,
                  "duration": 214,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.requestsFor({\n  method: 'POST',\n  url: '/usuarios',\n  body: {}\n}).then(response => {\n  expect(response.status).to.be.oneOf([400, 401]);\n  expect(response.body).to.have.property('email');\n  expect(response.body).to.have.property('password');\n  expect(response.body).to.have.property('nome');\n  expect(response.body).to.have.property('administrador');\n});",
                  "err": {},
                  "uuid": "20b7dc43-18aa-44be-8977-930b4e7c0dd2",
                  "parentUUID": "093299ba-db8f-42bc-a477-8e99852c453f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a9a7e39f-311c-4e00-ae0c-d1c7c21c4900",
                "2f0d2454-442c-41b7-a3ca-22cf12574923",
                "41f8b1e7-9c5b-4e2b-9708-214647263f58",
                "db1b1086-34ed-4623-96c1-a43d18de65ce",
                "20b7dc43-18aa-44be-8977-930b4e7c0dd2"
              ],
              "failures": [
                "19605084-36ca-47c0-80c1-5e2471a62ae5"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1782,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.3.0"
    }
  }
}